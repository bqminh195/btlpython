from django.db import models
from django.contrib.auth.models import User
from datetime import timedelta
from django.utils import timezone
from manager.models import Book, Penalty  # üîó ƒê·ªìng b·ªô d·ªØ li·ªáu v·ªõi b√™n qu·∫£n l√Ω


# -----------------------------
# H√†m t√≠nh ng√†y tr·∫£ m·∫∑c ƒë·ªãnh
# -----------------------------
def default_due_date():
    """H·∫°n tr·∫£ m·∫∑c ƒë·ªãnh l√† 7 ng√†y k·ªÉ t·ª´ ng√†y m∆∞·ª£n"""
    return timezone.now() + timedelta(days=7)


# -----------------------------
# MODEL PHI·∫æU M∆Ø·ª¢N (Loan)
# -----------------------------
class Loan(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="Ng∆∞·ªùi m∆∞·ª£n")
    book = models.ForeignKey(Book, on_delete=models.CASCADE, verbose_name="S√°ch m∆∞·ª£n")
    borrowed_at = models.DateTimeField(default=timezone.now, verbose_name="Ng√†y m∆∞·ª£n")
    due_date = models.DateTimeField(default=default_due_date, verbose_name="H·∫°n tr·∫£")
    returned = models.BooleanField(default=False, verbose_name="ƒê√£ tr·∫£")
    returned_at = models.DateTimeField(null=True, blank=True, verbose_name="Ng√†y tr·∫£")

    # -----------------------------
    # C√°c h√†m x·ª≠ l√Ω nghi·ªáp v·ª•
    # -----------------------------
    def is_overdue(self):
        """Ki·ªÉm tra n·∫øu s√°ch n√†y ƒë√£ qu√° h·∫°n m√† ch∆∞a tr·∫£."""
        return not self.returned and timezone.now().date() > self.due_date.date()

    def days_overdue(self):
        """T√≠nh s·ªë ng√†y qu√° h·∫°n (ch·ªâ t√≠nh theo ng√†y)."""
        if not self.is_overdue():
            return 0
        return max(0, (timezone.now().date() - self.due_date.date()).days)

    def create_penalty_if_overdue(self):
        """
        T·ª± ƒë·ªông t·∫°o phi·∫øu ph·∫°t n·∫øu s√°ch n√†y qu√° h·∫°n m√† ch∆∞a c√≥ phi·∫øu ph·∫°t t∆∞∆°ng ·ª©ng.
        """
        if self.is_overdue():
            overdue_days = self.days_overdue()
            fine_amount = overdue_days * 1000  # üí∞ 1000 VNƒê / ng√†y qu√° h·∫°n

            # Ki·ªÉm tra xem phi·∫øu ph·∫°t cho Loan n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
            if not Penalty.objects.filter(loan=self).exists():
                Penalty.objects.create(
                    user=self.user,
                    loan=self,
                    amount=fine_amount,
                    reason=f"Qu√° h·∫°n {overdue_days} ng√†y",
                    cleared=False,
                )

    def __str__(self):
        return f"{self.user.username} - {self.book.title}"

    class Meta:
        verbose_name = "Phi·∫øu m∆∞·ª£n"
        verbose_name_plural = "üìò Danh s√°ch phi·∫øu m∆∞·ª£n"
        ordering = ["-borrowed_at"]


# -----------------------------
# MODEL H·ªí S∆† NG∆Ø·ªúI M∆Ø·ª¢N
# -----------------------------
class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="T√†i kho·∫£n")
    msv = models.CharField(max_length=20, verbose_name="M√£ sinh vi√™n", unique=True)

    def __str__(self):
        return f"{self.user.username} - {self.msv}"

    class Meta:
        verbose_name = "H·ªì s∆° ng∆∞·ªùi m∆∞·ª£n"
        verbose_name_plural = "üë§ H·ªì s∆° ng∆∞·ªùi m∆∞·ª£n"
