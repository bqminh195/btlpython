from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login
from django.core.paginator import Paginator
from django.utils import timezone
from .forms import UserUpdateForm, UserProfileForm, CustomPasswordChangeForm
from django.contrib.auth import update_session_auth_hash

from manager.models import Book, Penalty, CheckRequest
from borrower.models import Loan, UserProfile
from .forms import CheckRequestForm
from datetime import timedelta

from django.contrib.auth.models import User
from django.contrib.auth.views import PasswordResetView
from django.core.exceptions import ObjectDoesNotExist
# ======================================================
#QU√äN M·∫¨T KH·∫®U
# ======================================================
class CustomPasswordResetView(PasswordResetView):
    template_name = 'borrower/password_reset.html'
    email_template_name = 'borrower/password_reset_email.html'
    html_email_template_name = 'borrower/password_reset_email.html'
    subject_template_name = 'borrower/password_reset_subject.txt'
    success_url = '/borrower/password-reset/done/'

    def get_form_kwargs(self):
        """
        Ghi ƒë√® ƒë·ªÉ h·ªó tr·ª£ nh·∫≠p username thay v√¨ email.
        Django s·∫Ω t·ª± t·∫°o form d√πng email, nh∆∞ng ta thay gi√° tr·ªã n√†y b·∫±ng email c·ªßa user t√¨m ƒë∆∞·ª£c.
        """
        kwargs = super().get_form_kwargs()
        if self.request.method == "POST":
            username = self.request.POST.get("username")
            try:
                user = User.objects.get(username=username)
                # G·ª≠i ƒë√∫ng ƒë·ªãnh d·∫°ng m√† Django PasswordResetForm c·∫ßn
                kwargs["data"] = {"email": user.email}
            except User.DoesNotExist:
                # Kh√¥ng ti·∫øt l·ªô th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i
                kwargs["data"] = {"email": ""}
        return kwargs
# G·∫Øn alias ng·∫Øn g·ªçn ƒë·ªÉ import d·ªÖ
custom_password_reset_view = CustomPasswordResetView.as_view()
# ======================================================
#X√ÅC NH·∫¨N M∆Ø·ª¢N
# ======================================================
@login_required
def confirm_borrow(request, book_id):
    book = get_object_or_404(Book, id=book_id)

    if request.method == 'POST':
        # T·∫°o b·∫£n ghi m∆∞·ª£n
        Loan.objects.create(
            user=request.user,
            book=book,
            borrowed_at=timezone.now(),
            due_date=timezone.now() + timedelta(days=14)
        )
        # Sau khi x√°c nh·∫≠n ‚Üí chuy·ªÉn ƒë·∫øn danh s√°ch m∆∞·ª£n
        return redirect('borrower:my_loans')

    return render(request, 'borrower/confirm_borrow.html', {'book': book})
# ======================================================
# ƒêƒÇNG K√ù Y√äU C·∫¶U KI·ªÇM TRA (CHECK-IN / CHECK-OUT)
# ======================================================
@login_required
def check_request_view(request):
    """
    Sinh vi√™n g·ª≠i y√™u c·∫ßu Check-in / Check-out.
    Hi·ªÉn th·ªã danh s√°ch y√™u c·∫ßu ƒë√£ g·ª≠i v√† tr·∫°ng th√°i duy·ªát c·ªßa qu·∫£n l√Ω.
    """
    if request.method == 'POST':
        form = CheckRequestForm(request.POST)
        if form.is_valid():
            check_request = form.save(commit=False)
            check_request.user = request.user
            check_request.save()
            messages.success(request, "‚úÖ Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi qu·∫£n l√Ω.")
            return redirect('borrower:borrower_home')
    else:
        form = CheckRequestForm()

    # Danh s√°ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    user_requests = CheckRequest.objects.filter(user=request.user).order_by('-created_at')

    # Ph√¢n trang 5 y√™u c·∫ßu m·ªói trang
    paginator = Paginator(user_requests, 5)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    return render(request, 'borrower/check_requests.html', {
        'form': form,
        'page_obj': page_obj,
    })


@login_required
def delete_check_request(request, request_id):
    """
    Cho ph√©p ng∆∞·ªùi d√πng x√≥a y√™u c·∫ßu ch∆∞a ƒë∆∞·ª£c duy·ªát ho·∫∑c b·ªã t·ª´ ch·ªëi.
    """
    check_request = get_object_or_404(CheckRequest, id=request_id, user=request.user)

    if check_request.approved:
        messages.error(request, "‚ùå Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c duy·ªát, kh√¥ng th·ªÉ x√≥a.")
    else:
        check_request.delete()
        messages.success(request, "üóëÔ∏è Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.")

    return redirect('borrower:check_requests')


# ======================================================
# ƒêƒÇNG K√ù NG∆Ø·ªúI D√ôNG (REGISTER)
# ======================================================
def register(request):
    """
    Trang ƒëƒÉng k√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi.
    Sau khi ƒëƒÉng k√Ω xong s·∫Ω t·ª± ƒëƒÉng nh·∫≠p v√† chuy·ªÉn v·ªÅ trang m∆∞·ª£n s√°ch.
    """
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p.")
            return redirect("borrower:borrower_home")
        else:
            messages.error(request, "‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.")
    else:
        form = UserCreationForm()

    return render(request, "borrower/register.html", {"form": form})


# ======================================================
# TRANG CH·ª¶ NG∆Ø·ªúI M∆Ø·ª¢N
# ======================================================
from django.db.models import Sum
from django.contrib import messages
from django.utils import timezone
from django.contrib.auth.decorators import login_required
from django.shortcuts import render
from manager.models import Book, Penalty, CheckRequest
from borrower.models import Loan


@login_required
def borrower_home(request):
    """
    Trang ch·ªß hi·ªÉn th·ªã danh s√°ch s√°ch, l·ªçc, t√¨m ki·∫øm,
    v√† c·∫£nh b√°o n·∫øu c√≥ s√°ch m∆∞·ª£n qu√° h·∫°n ho·∫∑c b·ªã ph·∫°t.
    """

    # ======================================================
    # 1Ô∏è‚É£ L·∫•y phi·∫øu m∆∞·ª£n c·ªßa ng∆∞·ªùi d√πng
    # ======================================================
    user_loans = Loan.objects.filter(user=request.user, returned=False)
    overdue_loans = user_loans.filter(due_date__lt=timezone.now())

    # T·∫°o phi·∫øu ph·∫°t t·ª± ƒë·ªông n·∫øu qu√° h·∫°n
    for loan in overdue_loans:
        loan.create_penalty_if_overdue()

    # ======================================================
    # 2Ô∏è‚É£ T√≠nh t·ªïng s·ªë phi·∫øu ph·∫°t ch∆∞a thanh to√°n
    # ======================================================
    unpaid_penalties = Penalty.objects.filter(user=request.user, cleared=False)
    total_unpaid_amount = unpaid_penalties.aggregate(Sum("amount"))["amount__sum"] or 0

    # ======================================================
    # 3Ô∏è‚É£ Th√¥ng b√°o s·∫Øp ƒë·∫øn h·∫°n tr·∫£ (tr∆∞·ªõc 2 ng√†y)
    # ======================================================
    today = timezone.now().date()
    upcoming_loans = user_loans.filter(due_date__gt=today, due_date__lte=today + timedelta(days=2))

    if upcoming_loans.exists():
        loan_titles = ", ".join([loan.book.title for loan in upcoming_loans])
        messages.info(
            request,
            f"üìÖ B·∫°n c√≥ {upcoming_loans.count()} cu·ªën s√°ch s·∫Øp ƒë·∫øn h·∫°n tr·∫£: {loan_titles}."
        )
    # ======================================================
    # 4Ô∏è‚É£ Tr·∫°ng th√°i y√™u c·∫ßu Check-in / Check-out
    # ======================================================
    latest_request = CheckRequest.objects.filter(user=request.user).order_by('-created_at').first()
    if latest_request:
        if latest_request.approved:
            messages.success(request, "üéâ Y√™u c·∫ßu Check-in/Check-out c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c qu·∫£n l√Ω duy·ªát!")
        elif latest_request.rejected:
            messages.error(request, "‚ùå Y√™u c·∫ßu Check-in/Check-out c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.")
        else:
            messages.info(request, "üïì Y√™u c·∫ßu Check-in/Check-out c·ªßa b·∫°n ƒëang ch·ªù duy·ªát...")

    # ======================================================
    # 5Ô∏è‚É£ T√¨m ki·∫øm & l·ªçc s√°ch
    # ======================================================
    query = request.GET.get("q", "")
    selected_category = request.GET.get("category", "")
    selected_year = request.GET.get("year", "")

    books = Book.objects.all()

    if query:
        books = books.filter(title__icontains=query) | books.filter(author__icontains=query)
    if selected_category:
        books = books.filter(category__iexact=selected_category)
    if selected_year:
        books = books.filter(year=selected_year)

    categories = sorted(
        [c for c in Book.objects.values_list('category', flat=True).distinct() if c],
        key=lambda x: x.lower()
    )
    years = sorted(
        [y for y in Book.objects.values_list('year', flat=True).distinct() if y],
        reverse=True
    )

    # ======================================================
    # 6Ô∏è‚É£ Ph√¢n trang & hi·ªÉn th·ªã
    # ======================================================
    paginator = Paginator(books, 9)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    new_books = Book.objects.all().order_by("-created_at")[:6]

    context = {
        "new_books": new_books,
        "page_obj": page_obj,
        "query": query,
        "categories": categories,
        "years": years,
        "selected_category": selected_category,
        "selected_year": selected_year,
        "overdue_loans": overdue_loans,
        "unpaid_penalties": unpaid_penalties,
        "total_unpaid_amount": total_unpaid_amount,  # üëà D√πng cho popup g·ªôp
    }

    return render(request, "borrower/home.html", context)



# ======================================================
# M∆Ø·ª¢N S√ÅCH
# ======================================================
# ======================================================
# X√ÅC NH·∫¨N M∆Ø·ª¢N (cho ph√©p ng∆∞·ªùi qu·∫£n l√Ω ch·ªçn th·ªùi gian m∆∞·ª£n)
# ======================================================
@login_required
def confirm_borrow(request, book_id):
    book = get_object_or_404(Book, id=book_id)

    if request.method == 'POST':
        # N·∫øu l√† qu·∫£n l√Ω (is_staff) th√¨ cho ph√©p ch·ªçn s·ªë ng√†y m∆∞·ª£n t√πy √Ω
        if request.user.is_staff:
            try:
                days = int(request.POST.get("days", 7))
            except ValueError:
                days = 7
        else:
            # Ng∆∞·ªùi m∆∞·ª£n b√¨nh th∆∞·ªùng: m·∫∑c ƒë·ªãnh 7 ng√†y
            days = 7

        due_date = timezone.now() + timedelta(days=days)

        # T·∫°o b·∫£n ghi m∆∞·ª£n
        if book.available_copies > 0:
            Loan.objects.create(
                user=request.user,
                book=book,
                borrowed_at=timezone.now(),
                due_date=due_date
            )
            book.available_copies -= 1
            book.save()

            messages.success(
                request,
                f"‚úÖ M∆∞·ª£n s√°ch '{book.title}' th√†nh c√¥ng. H·∫°n tr·∫£ sau {days} ng√†y ({due_date.strftime('%d/%m/%Y')})."
            )
        else:
            messages.error(request, "‚ùå S√°ch hi·ªán ƒë√£ h·∫øt b·∫£n c√≥ s·∫µn.")

        return redirect('borrower:my_loans')

    # GET ‚Üí hi·ªÉn th·ªã form x√°c nh·∫≠n m∆∞·ª£n
    return render(request, 'borrower/confirm_borrow.html', {'book': book})

# ======================================================
# DANH S√ÅCH PHI·∫æU M∆Ø·ª¢N
# ======================================================
@login_required
def my_loans(request):
    """
    Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c phi·∫øu m∆∞·ª£n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i,
    k√®m x·ª≠ l√Ω ph·∫°t n·∫øu c√≥ s√°ch qu√° h·∫°n v√† ph√¢n trang.
    """
    loans = Loan.objects.filter(user=request.user).order_by("-borrowed_at")

    for loan in loans:
        loan.create_penalty_if_overdue()

    paginator = Paginator(loans, 10)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    return render(request, "borrower/my_loans.html", {"page_obj": page_obj})


# ======================================================
# TR·∫¢ S√ÅCH
# ======================================================
@login_required
def return_book(request, loan_id):
    """
    Ng∆∞·ªùi d√πng tr·∫£ s√°ch ‚Üí c·∫≠p nh·∫≠t tr·∫°ng th√°i & s·ªë l∆∞·ª£ng
    """
    loan = get_object_or_404(Loan, id=loan_id, user=request.user)

    if loan.returned:
        messages.info(request, f"üìò S√°ch '{loan.book.title}' ƒë√£ ƒë∆∞·ª£c tr·∫£ tr∆∞·ªõc ƒë√≥.")
        return redirect("borrower:my_loans")

    loan.returned = True
    loan.returned_at = timezone.now()
    loan.save()

    loan.book.available_copies += 1
    loan.book.save()

    messages.success(request, f"‚úÖ B·∫°n ƒë√£ tr·∫£ s√°ch '{loan.book.title}' th√†nh c√¥ng.")
    return redirect("borrower:my_loans")


# ======================================================
# T√åM KI·∫æM
# ======================================================
@login_required
def search(request):
    query = request.GET.get("q", "")
    books = Book.objects.all()

    if query:
        books = books.filter(title__icontains=query) | books.filter(author__icontains=query)
    else:
        messages.info(request, "üîç H√£y nh·∫≠p t√™n ho·∫∑c t√°c gi·∫£ ƒë·ªÉ t√¨m s√°ch.")

    paginator = Paginator(books, 9)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    return render(request, "borrower/search.html", {
        "query": query,
        "page_obj": page_obj,
    })


# ======================================================
# H·ªí S∆† NG∆Ø·ªúI D√ôNG
# ======================================================
@login_required
def profile_view(request):
    """
    Trang h·ªì s∆° ng∆∞·ªùi d√πng ‚Äî hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n v√† c√°c s√°ch ƒëang m∆∞·ª£n.
    (Kh√¥ng hi·ªÉn th·ªã c·∫£nh b√°o qu√° h·∫°n, ch·ªâ c·∫≠p nh·∫≠t ph·∫°t trong n·ªÅn)
    """
    # üßπ X√≥a to√†n b·ªô message c√≤n t·ªìn ƒë·ªçng (v√≠ d·ª• t·ª´ trang home)
    list(messages.get_messages(request))

    user = request.user
    profile = UserProfile.objects.filter(user=user).first()
    loans = Loan.objects.filter(user=user).select_related('book')

    # üîπ T·ª± ƒë·ªông c·∫≠p nh·∫≠t phi·∫øu ph·∫°t n·∫øu c√≥ s√°ch qu√° h·∫°n, nh∆∞ng KH√îNG hi·ªÉn th·ªã c·∫£nh b√°o
    for loan in loans:
        if loan.is_overdue():
            loan.create_penalty_if_overdue()

    return render(request, "borrower/profile.html", {
        "profile": profile,
        "loans": loans,
    })



@login_required
def update_profile(request):
    """
    Cho ph√©p ng∆∞·ªùi d√πng c·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° (email, m√£ sinh vi√™n)
    """
    user = request.user
    profile, created = UserProfile.objects.get_or_create(user=user)

    if request.method == "POST":
        user_form = UserUpdateForm(request.POST, instance=user)
        profile_form = UserProfileForm(request.POST, instance=profile)
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, "‚úÖ H·ªì s∆° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.")
            return redirect("borrower:profile")
        else:
            messages.error(request, "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t h·ªì s∆°.")
    else:
        user_form = UserUpdateForm(instance=user)
        profile_form = UserProfileForm(instance=profile)

    return render(request, "borrower/update_profile.html", {
        "user_form": user_form,
        "profile_form": profile_form,
    })


@login_required
def change_password(request):
    """
    Cho ph√©p ng∆∞·ªùi d√πng ƒë·ªïi m·∫≠t kh·∫©u (v√† v·∫´n gi·ªØ ƒëƒÉng nh·∫≠p sau khi ƒë·ªïi)
    """
    if request.method == "POST":
        form = CustomPasswordChangeForm(user=request.user, data=request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)
            messages.success(request, "üîê M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng.")
            return redirect("borrower:profile")
        else:
            messages.error(request, "‚ö†Ô∏è M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
    else:
        form = CustomPasswordChangeForm(user=request.user)

    return render(request, "borrower/change_password.html", {"form": form})


# ======================================================
# TRANG XEM DANH S√ÅCH PHI·∫æU PH·∫†T
# ======================================================
@login_required
def my_penalties(request):
    penalties = Penalty.objects.filter(user=request.user).order_by('-created_at')

    paginator = Paginator(penalties, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'borrower/my_penalties.html', {'penalties': page_obj})
