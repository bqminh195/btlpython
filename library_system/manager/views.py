from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.utils import timezone
from django.contrib.auth.decorators import login_required, user_passes_test
from django.core.paginator import Paginator
from .models import Book, Penalty, CheckRequest
from .forms import BookForm
from borrower.models import Loan
from django.http import HttpResponse
from .models import Penalty
from django.utils.encoding import smart_str
from io import BytesIO
from django.conf import settings

from datetime import datetime, timedelta, timezone as dt_timezone
from django.db.models import Count
from openpyxl import Workbook
from django.utils.timezone import now
from datetime import timedelta
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from .models import ManagerProfile
from .forms import ManagerProfileForm
from django.contrib.auth.views import PasswordResetView
from django.urls import reverse_lazy
from django.db.models import Q
# ===========================================================
# üß© Decorator: ch·ªâ cho ph√©p nh√¢n vi√™n qu·∫£n l√Ω (is_staff)
# ===========================================================
def staff_required(view_func):
    return user_passes_test(
        lambda u: u.is_staff,
        login_url='/accounts/login/'
    )(view_func)

@staff_required
def statistics_view(request):
    # L·∫•y d·ªØ li·ªáu l·ªçc th√°ng - nƒÉm t·ª´ form
    start_month = request.GET.get("start_month")
    end_month = request.GET.get("end_month")

    today = timezone.now()
    if not start_month:
        start_month = today.strftime("%Y-%m")
    if not end_month:
        end_month = today.strftime("%Y-%m")

    # Chuy·ªÉn chu·ªói yyyy-mm sang datetime
    start_date = datetime.strptime(start_month, "%Y-%m").replace(day=1, tzinfo=dt_timezone.utc)
    end_year, end_m = map(int, end_month.split("-"))
    end_date = datetime(end_year, end_m, 1, tzinfo=dt_timezone.utc) + timedelta(days=32)
    end_date = end_date.replace(day=1)

    # ==== Th·ªëng k√™ trong kho·∫£ng th·ªùi gian ====
    books_added = Book.objects.filter(created_at__gte=start_date, created_at__lt=end_date).count()
    loans_in_range = Loan.objects.filter(borrowed_at__gte=start_date, borrowed_at__lt=end_date)
    loans_returned = loans_in_range.filter(returned=True).count()
    loans_borrowed = loans_in_range.count()
    top_book = loans_in_range.values("book__title").annotate(total=Count("book")).order_by("-total").first()
    top_book_title = top_book["book__title"] if top_book else "Ch∆∞a c√≥ d·ªØ li·ªáu"
    penalties_unpaid = Penalty.objects.filter(cleared=False).count()

    context = {
        "books_added": books_added,
        "loans_borrowed": loans_borrowed,
        "loans_returned": loans_returned,
        "top_book_title": top_book_title,
        "penalties_unpaid": penalties_unpaid,
        "start_month": start_month,
        "end_month": end_month,
    }
    return render(request, "manager/statistics.html", context)


@staff_required
def export_excel(request, export_type):
    from openpyxl import Workbook
    from datetime import datetime

    wb = Workbook()
    ws = wb.active
    ws.title = "Danh s√°ch"

    # L·ªçc theo kho·∫£ng th·ªùi gian n·∫øu c√≥
    start_month = request.GET.get("start_month")
    end_month = request.GET.get("end_month")
    start_date = None
    end_date = None

    if start_month and end_month:
        start_date = datetime.strptime(start_month, "%Y-%m")
        end_year, end_m = map(int, end_month.split("-"))
        end_date = datetime(end_year, end_m, 1) + timedelta(days=32)
        end_date = end_date.replace(day=1)

    # === C√°c lo·∫°i d·ªØ li·ªáu xu·∫•t ===
    if export_type == "books":
        ws.append(["STT", "T√™n s√°ch", "T√°c gi·∫£", "Th·ªÉ lo·∫°i", "NƒÉm XB", "S·ªë l∆∞·ª£ng"])
        books = Book.objects.all()
        if start_date and end_date:
            books = books.filter(created_at__gte=start_date, created_at__lt=end_date)
        for i, b in enumerate(books, start=1):
            ws.append([i, b.title, b.author, b.category, b.year, b.total_copies])


    elif export_type == "loans":
        ws.append(["Ng∆∞·ªùi m∆∞·ª£n", "S√°ch", "Ng√†y m∆∞·ª£n", "H·∫°n tr·∫£", "ƒê√£ tr·∫£"])
        loans = Loan.objects.select_related("user", "book")
        if start_date and end_date:
            loans = loans.filter(borrowed_at__gte=start_date, borrowed_at__lt=end_date)
        for l in loans:
            ws.append([
                l.user.username,
                l.book.title,
                l.borrowed_at.replace(tzinfo=None) if l.borrowed_at else "",
                l.due_date.replace(tzinfo=None) if l.due_date else "",
                "‚úÖ" if l.returned else "‚ùå",
            ])

    elif export_type == "penalties":
        ws.append(["Ng∆∞·ªùi d√πng", "L√Ω do", "S·ªë ti·ªÅn", "ƒê√£ thanh to√°n"])
        penalties = Penalty.objects.select_related("user")
        if start_date and end_date:
            penalties = penalties.filter(created_at__gte=start_date, created_at__lt=end_date)
        for p in penalties:
            ws.append([p.user.username, p.reason, p.amount, "‚úÖ" if p.cleared else "‚ùå"])

    # Tr·∫£ file v·ªÅ ng∆∞·ªùi d√πng
    response = HttpResponse(
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    response["Content-Disposition"] = f'attachment; filename="{export_type}_{start_month}_to_{end_month}.xlsx"'
    wb.save(response)
    return response




# ===========================================================
# üè† TRANG CH·ª¶ QU·∫¢N L√ù S√ÅCH
# ===========================================================
@staff_required
def manager_home(request):
    print("üóÇÔ∏è ƒêang d√πng database:", settings.DATABASES['default']['NAME'])
    query = request.GET.get('q', '')
    category = request.GET.get('category', '')
    year = request.GET.get('year', '')

    books = Book.objects.all().order_by('-created_at')

    if query:
        books = books.filter(Q(title__icontains=query) | Q(author__icontains=query))
    if category:
        books = books.filter(category__icontains=category)
    if year:
        books = books.filter(year=year)   # ‚úÖ S·ª¨A: b·ªè icontains, d√πng so s√°nh ch√≠nh x√°c


    paginator = Paginator(books, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    categories = Book.objects.values_list('category', flat=True).distinct().order_by('category')
    years = Book.objects.values_list('year', flat=True).distinct().order_by('-year')

    return render(request, 'manager/home.html', {
        'books': page_obj,
        'page_obj': page_obj,
        'query': query,
        'category': category,
        'year': year,
        'categories': categories,
        'years': years,
        'total_books': Book.objects.count(),
    })


# ===========================================================
# üìö CRUD S√ÅCH
# ===========================================================
@staff_required
def add_book(request):
    if request.method == 'POST':
        form = BookForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úÖ Th√™m s√°ch th√†nh c√¥ng!")
            return redirect('manager:manager_home')
    else:
        form = BookForm()
    return render(request, 'manager/add_book.html', {'form': form})


@staff_required
def edit_book(request, book_id):
    book = get_object_or_404(Book, pk=book_id)
    if request.method == 'POST':
        form = BookForm(request.POST, request.FILES, instance=book)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úèÔ∏è C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!")
            return redirect('manager:manager_home')
    else:
        form = BookForm(instance=book)
    return render(request, 'manager/edit_book.html', {'form': form, 'book': book})


@staff_required
def delete_book(request, book_id):
    book = get_object_or_404(Book, pk=book_id)
    book.delete()
    messages.success(request, f"üóëÔ∏è ƒê√£ x√≥a s√°ch '{book.title}' th√†nh c√¥ng.")
    return redirect('manager:manager_home')


# ===========================================================
# üìñ QU·∫¢N L√ù PHI·∫æU M∆Ø·ª¢N
# ===========================================================
@staff_required
def manage_loans(request):
    loans = Loan.objects.select_related('user', 'book').order_by('-borrowed_at')
    query = request.GET.get('q', '')
    filter_status = request.GET.get('status', '')

    if query:
        loans = loans.filter(user__username__icontains=query) | loans.filter(book__title__icontains=query)

    if filter_status == 'overdue':
        loans = loans.filter(returned=False, due_date__lt=timezone.now())
    elif filter_status == 'ontime':
        loans = loans.filter(returned=False, due_date__gte=timezone.now())

    paginator = Paginator(loans, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'manager/manage_loans.html', {
        'loans': page_obj,
        'page_obj': page_obj,
        'now': timezone.now(),
        'query': query,
        'filter_status': filter_status,
    })


@staff_required
def mark_returned(request, loan_id):
    loan = get_object_or_404(Loan, pk=loan_id)
    if not loan.returned:
        loan.returned = True
        loan.returned_at = timezone.now()
        loan.book.available_copies += 1
        loan.book.save()
        loan.save()
        messages.success(request, f"‚úÖ ƒê√£ ƒë√°nh d·∫•u '{loan.book.title}' l√† ƒë√£ tr·∫£.")
    else:
        messages.info(request, f"‚ÑπÔ∏è S√°ch '{loan.book.title}' ƒë√£ ƒë∆∞·ª£c tr·∫£ tr∆∞·ªõc ƒë√≥.")
    return redirect('manager:manage_loans')


# ===========================================================
# üí∞ QU·∫¢N L√ù PHI·∫æU PH·∫†T
# ===========================================================
@staff_required
def manage_penalties(request):
    overdue_loans = Loan.objects.filter(returned=False, due_date__lt=timezone.now())
    for loan in overdue_loans:
        loan.create_penalty_if_overdue()

    penalties = Penalty.objects.all().order_by('-created_at')
    search = request.GET.get('search', '')
    status = request.GET.get('status', '')

    if search:
        penalties = penalties.filter(user__username__icontains=search)
    if status == 'paid':
        penalties = penalties.filter(cleared=True)
    elif status == 'unpaid':
        penalties = penalties.filter(cleared=False)

    paginator = Paginator(penalties, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'search': search,
        'status': status,
        'total_penalties': penalties.count(),
        'unpaid_count': penalties.filter(cleared=False).count(),
        'paid_count': penalties.filter(cleared=True).count(),
    }
    return render(request, 'manager/manage_penalties.html', context)


@staff_required
def clear_penalty(request, penalty_id):
    penalty = get_object_or_404(Penalty, id=penalty_id)
    penalty.cleared = True
    penalty.save()
    messages.success(request, f"üí∏ ƒê√£ x√°c nh·∫≠n {penalty.user.username} ƒë√£ thanh to√°n xong.")
    return redirect('manager:manage_penalties')


# ===========================================================
# üßæ QU·∫¢N L√ù Y√äU C·∫¶U CHECK-IN / CHECK-OUT
# ===========================================================
@staff_required
def manage_check_requests(request):
    """Hi·ªÉn th·ªã danh s√°ch c√°c y√™u c·∫ßu check-in / check-out c·ªßa ng∆∞·ªùi m∆∞·ª£n"""    
    requests_list = CheckRequest.objects.select_related("user").order_by('-created_at')


    # B·ªô l·ªçc
    filter_type = request.GET.get('type', '')
    status = request.GET.get('status', '')

    if filter_type:
        requests_list = requests_list.filter(check_type=filter_type)
    if status == 'approved':
        requests_list = requests_list.filter(approved=True)
    elif status == 'rejected':
        requests_list = requests_list.filter(rejected=True)
    elif status == 'pending':
        requests_list = requests_list.filter(approved=False, rejected=False)

    paginator = Paginator(requests_list, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'manager/manage_check_requests.html', {
        'requests': requests_list
    })


@staff_required
def approve_check_request(request, req_id):
    req = get_object_or_404(CheckRequest, id=req_id)
    req.approved = True
    req.rejected = False
    req.manager_note = "‚úÖ ƒê√£ duy·ªát b·ªüi qu·∫£n l√Ω."
    req.save()
    messages.success(request, f"‚úî ƒê√£ duy·ªát y√™u c·∫ßu {req.user.username} ({req.get_check_type_display()}).")
    return redirect('manager:manage_check_requests')


@staff_required
def reject_check_request(request, req_id):
    req = get_object_or_404(CheckRequest, id=req_id)
    req.approved = False
    req.rejected = True
    req.manager_note = "‚ùå B·ªã t·ª´ ch·ªëi b·ªüi qu·∫£n l√Ω."
    req.save()
    messages.warning(request, f"‚ùå ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu {req.user.username} ({req.get_check_type_display()}).")
    return redirect('manager:manage_check_requests')


# ===========================================================
# üöÄ CHUY·ªÇN H∆Ø·ªöNG SAU ƒêƒÇNG NH·∫¨P
# ===========================================================
@login_required
def redirect_view(request):
    if request.user.is_staff:
        return redirect('manager:manager_home')
    else:
        return redirect('borrower:borrower_home')

        # C·∫≠p nh·∫≠t ng√†y m∆∞·ª£n v√† h·∫°n tr·∫£ cho phi·∫øu m∆∞·ª£n
@staff_required
def edit_loan_dates(request, loan_id):
    loan = get_object_or_404(Loan, pk=loan_id)

    if request.method == 'POST':
        borrowed_at = request.POST.get('borrowed_at')
        due_date = request.POST.get('due_date')

        if borrowed_at and due_date:
            from django.utils.dateparse import parse_datetime
            loan.borrowed_at = parse_datetime(borrowed_at)
            loan.due_date = parse_datetime(due_date)
            loan.save()
            messages.success(request, f"üïí ƒê√£ c·∫≠p nh·∫≠t ng√†y m∆∞·ª£n v√† h·∫°n tr·∫£ cho '{loan.book.title}'.")
            return redirect('manager:manage_loans')
        else:
            messages.error(request, "‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
    
    return render(request, 'manager/edit_loan.html', {'loan': loan})

# ==========================================
# üë§ H·ªí S∆† QU·∫¢N L√ù (C·∫¨P NH·∫¨T V√Ä C·∫§P L·∫†I M·∫¨T KH·∫®U)
# ==========================================
@staff_required
def manager_profile(request):
    # L·∫•y ho·∫∑c t·∫°o h·ªì s∆° qu·∫£n l√Ω t∆∞∆°ng ·ª©ng v·ªõi user hi·ªán t·∫°i
    profile, created = ManagerProfile.objects.get_or_create(user=request.user)

    if request.method == 'POST':
        form = ManagerProfileForm(request.POST, instance=profile)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úÖ C·∫≠p nh·∫≠t h·ªì s∆° qu·∫£n l√Ω th√†nh c√¥ng!")
            return redirect('manager:profile')
    else:
        form = ManagerProfileForm(instance=profile)

    return render(request, 'manager/profile.html', {
        'user': request.user,
        'form': form
    })


# ==========================================
# üîë G·ª¨I EMAIL C·∫§P L·∫†I M·∫¨T KH·∫®U (QU√äN MK)
# ==========================================
class ManagerPasswordResetView(PasswordResetView):
    template_name = 'manager/reset_password.html'
    success_url = reverse_lazy('login')
    email_template_name = 'manager/reset_email.html'